import pandas as pd
from sklearn.metrics import confusion_matrix

# Load your datasets
df_main = pd.read_csv('main_dataset.csv')  # your original dataset
df_age = pd.read_csv('age_dataset.csv')  # dataset containing age_grp_cd

# Merge the age data with the main dataset
df = pd.merge(df_main, df_age[['PRTCP_ID', 'Age_grp_cd']], on='PRTCP_ID')

# Make predictions on the dataset (assuming your model is already trained as `model`)
X = df.drop(columns=['STP_DFR_TRGT', 'PRTCP_ID', 'Age_grp_cd'])  # Exclude 'age_grp_cd' and 'PRTCP_ID' from features
y_true = df['STP_DFR_TRGT']  # Actual labels
y_pred = model.predict(X)

# Separate predictions by age group
age_group_0_38 = df[df['Age_grp_cd'] == 1]
age_group_above_38 = df[df['Age_grp_cd'] == 0]

# Disparate impact calculation
def disparate_impact(y_pred, y_true):
    cm = confusion_matrix(y_true, y_pred)
    tp, fn, fp, tn = cm.ravel()
    return (tp + fp) / (tp + fn + fp + tn)  # Ratio of positive predictions

# Calculate Disparate Impact for both age groups
di_0_38 = disparate_impact(age_group_0_38['STP_DFR_TRGT'], model.predict(age_group_0_38.drop(columns=['STP_DFR_TRGT', 'PRTCP_ID', 'Age_grp_cd'])))
di_above_38 = disparate_impact(age_group_above_38['STP_DFR_TRGT'], model.predict(age_group_above_38.drop(columns=['STP_DFR_TRGT', 'PRTCP_ID', 'Age_grp_cd'])))

print(f'Disparate Impact (0-38): {di_0_38}')
print(f'Disparate Impact (Above 38): {di_above_38}')



import tensorflow as tf
from tensorflow.keras import layers
import xgboost as xgb

# Adversarial Debiasing Network
def build_adversarial_debiaser(input_dim):
    model = tf.keras.Sequential([
        layers.Dense(32, activation='relu', input_shape=(input_dim,)),
        layers.Dense(16, activation='relu'),
        layers.Dense(1, activation='sigmoid')  # Output is binary: Age Group 0-38 or above
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Train adversarial debiaser
X_train = df.drop(columns=['STP_DFR_TRGT', 'PRTCP_ID', 'Age_grp_cd'])  # Exclude 'age_grp_cd'
y_age = df['Age_grp_cd']

adversarial_model = build_adversarial_debiaser(X_train.shape[1])

# Adversarial training loop to debias the main model
def adversarial_training(model, adversarial_model, X, y, y_age, epochs=10):
    for epoch in range(epochs):
        # Train the main model (without using age_grp_cd)
        model.fit(X, y)
        
        # Get the intermediate predictions from the main model
        preds = model.predict_proba(X)[:, 1]
        
        # Train the adversarial model to detect age group from the predictions
        adversarial_model.fit(X, y_age, epochs=1, batch_size=64)
        
        # Get adversarial loss and adjust main model weights to reduce age prediction ability
        adv_loss = adversarial_model.evaluate(X, y_age, verbose=0)
        print(f"Epoch {epoch+1}/{epochs}, Adversarial Loss: {adv_loss[0]}")
        
    return model

# Train model with adversarial debiasing
adversarially_debiased_model = adversarial_training(model, adversarial_model, X_train, df['STP_DFR_TRGT'], df['Age_grp_cd'])

# Post-training: Evaluate the debiased model
y_pred_debiased = adversarially_debiased_model.predict(X_train)
di_0_38_debiased = disparate_impact(age_group_0_38['STP_DFR_TRGT'], y_pred_debiased[age_group_0_38.index])
di_above_38_debiased = disparate_impact(age_group_above_38['STP_DFR_TRGT'], y_pred_debiased[age_group_above_38.index])

print(f'Post-Mitigation Disparate Impact (0-38): {di_0_38_debiased}')
print(f'Post-Mitigation Disparate Impact (Above 38): {di_above_38_debiased}')